import React from 'react';
import SortableTree from 'react-sortable-tree';
import FileExplorerTheme from 'react-sortable-tree-theme-file-explorer';



function setChild(parentid, childid) {
  const [owner, document] = parentid.split("/");
  const doc = typecell.doc({ owner, document });

  doc.ensureRef($.childReference, childid);
}

function addPage(page: string) {
  let doc = typecell.doc({ owner: $.routing.owner, document: page });
  setChild($.rootDoc.id, doc.id);
}

function keyHandler(event) {
  if (event.key === "Enter") {
    addPage(event.target.value);
    event.target.value = "";
  }
}

function findNodeIndexInParent(tree, node) {
  for (let i = 0; i < tree.length; i++) {
    let child = tree[i];
    if (child.doc === node.doc) {
      return i;
    }
    let inSubTree = findNodeIndexInParent(child.children, node);
    if (inSubTree !== undefined) {
      return inSubTree;
    }
  }
  return undefined;
}

function onMoveNode(arg: { treeData: object[], node: object, nextParentNode: object, prevPath: number[] | string[], prevTreeIndex: number, nextPath: number[] | string[], nextTreeIndex: number }) {
  if (!arg.nextParentNode) {
    return;
  }
  const index = findNodeIndexInParent(arg.treeData, arg.node);
  if (index === undefined) {
    throw new Error("unexpected");
  }
  arg.nextParentNode.doc.ensureRef($.childReference, arg.node.doc.id, index);
}

export let tree = <div style={{ minHeight: 200, height: '100%', background: "white", position: "relative", zIndex: 10 }}>
  <input type="text" placeholder="Add page" onKeyUp={keyHandler} />
  <SortableTree
    isVirtualized={false}
    style={{ height: '100%', minHeight: 200 }}
    treeData={$.treeData}
    onMoveNode={onMoveNode}
    onChange={() => { }}
    theme={FileExplorerTheme}
  />
</div>



export let routing = typecell.routing();
export let rootDoc = typecell.doc(routing);



import * as React from "react"
export const treeData = [getTreeForDoc($.rootDoc)]

function getTreeForDoc(doc) {
  const children = [];
  for (let ref of doc.getRefs($.childReference)) {
    if (ref.namespace == typecell.namespace && ref.type === "child") {
      const child = typecell.doc(ref.target);
      children.push(getTreeForDoc(child));
    }
  }
  // TODO: don't observable react elements
  return {
    title: <a href="" onClick={(e) => { e.preventDefault(); $.selected = doc.id }}>{doc.id}</a>,
    children,
    expanded: true,
    doc: doc,
  }
}



