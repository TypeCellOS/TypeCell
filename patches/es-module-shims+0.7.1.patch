diff --git a/node_modules/es-module-shims/dist/es-module-shims.js b/node_modules/es-module-shims/dist/es-module-shims.js
index ab50a1d..d343c94 100644
--- a/node_modules/es-module-shims/dist/es-module-shims.js
+++ b/node_modules/es-module-shims/dist/es-module-shims.js
@@ -256,15 +256,15 @@
     await loadAll(load, seen);
     lastLoad = undefined;
     resolveDeps(load, seen);
-    const module = await dynamicImport(load.b);
+    const module = await importShim$1.dynamicImport(load.b);
     // if the top-level load is a shell, run its update function
     if (load.s)
-      (await dynamicImport(load.s)).u$_(module);
+      (await importShim$1.dynamicImport(load.s)).u$_(module);
     return module;
   }
 
   async function importShim$1 (id, parentUrl) {
-    return topLevelLoad(resolve(id, parentUrl || baseUrl));
+    return topLevelLoad(importShim$1.resolve(id, parentUrl || baseUrl));
   }
 
   self.importShim = importShim$1;
@@ -275,7 +275,7 @@
 
   async function importMetaResolve (id, parentUrl = this.url) {
     await importMapPromise;
-    return resolve(id, `${parentUrl}`);
+    return importShim$1.resolve(id, `${parentUrl}`);
   }
 
   Object.defineProperties(importShim$1, {
@@ -289,6 +289,8 @@
   importShim$1.onerror = (e) => {
     throw e;
   };
+  importShim$1.dynamicImport = (module) => dynamicImport(module);
+  importShim$1.resolve = (id, parent) => resolve(id, parent);
 
   let lastLoad;
   function resolveDeps (load, seen) {
@@ -397,7 +399,7 @@
 
     const depcache = importMap.depcache[url];
     if (depcache)
-      depcache.forEach(depUrl => getOrCreateLoad(resolve(depUrl, url)));
+      depcache.forEach(depUrl => getOrCreateLoad(importShim$1.resolve(depUrl, url)));
 
     load.f = (async () => {
       if (!source) {
@@ -424,7 +426,7 @@
 
     load.L = load.f.then(async deps => {
       load.d = await Promise.all(deps.map(async depId => {
-        const resolved = resolve(depId, load.r || load.u);
+        const resolved = importShim$1.resolve(depId, load.r || load.u);
         if (importShim$1.skip.test(resolved))
           return { b: resolved };
         const depLoad = getOrCreateLoad(resolved);
